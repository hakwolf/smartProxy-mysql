// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:20
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:20

import "bytes"

func SetParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func SetAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func ForceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

var (
	SHARE        = []byte("share")
	MODE         = []byte("mode")
	IF_BYTES     = []byte("if")
	VALUES_BYTES = []byte("values")
)

//line sql.y:45
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	byt         byte
	bytes       []byte
	bytes2      [][]byte
	str         string
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
}

const LEX_ERROR = 57346
const SELECT = 57347
const INSERT = 57348
const UPDATE = 57349
const DELETE = 57350
const FROM = 57351
const WHERE = 57352
const GROUP = 57353
const HAVING = 57354
const ORDER = 57355
const BY = 57356
const LIMIT = 57357
const FOR = 57358
const ALL = 57359
const DISTINCT = 57360
const AS = 57361
const EXISTS = 57362
const NULL = 57363
const ASC = 57364
const DESC = 57365
const VALUES = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const ID = 57373
const STRING = 57374
const NUMBER = 57375
const VALUE_ARG = 57376
const COMMENT = 57377
const UNION = 57378
const MINUS = 57379
const EXCEPT = 57380
const INTERSECT = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const OR = 57393
const AND = 57394
const NOT = 57395
const BETWEEN = 57396
const CASE = 57397
const WHEN = 57398
const THEN = 57399
const ELSE = 57400
const LE = 57401
const GE = 57402
const NE = 57403
const NULL_SAFE_EQUAL = 57404
const IS = 57405
const LIKE = 57406
const IN = 57407
const UNARY = 57408
const END = 57409
const BEGIN = 57410
const START = 57411
const TRANSACTION = 57412
const COMMIT = 57413
const ROLLBACK = 57414
const NAMES = 57415
const SQL_MODE = 57416
const REPLACE = 57417
const ADMIN = 57418
const HELP = 57419
const OFFSET = 57420
const COLLATE = 57421
const CREATE = 57422
const ALTER = 57423
const DROP = 57424
const RENAME = 57425
const TABLE = 57426
const INDEX = 57427
const VIEW = 57428
const TO = 57429
const IGNORE = 57430
const IF = 57431
const UNIQUE = 57432
const USING = 57433
const TRUNCATE = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"NULL",
	"ASC",
	"DESC",
	"VALUES",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"ID",
	"STRING",
	"NUMBER",
	"VALUE_ARG",
	"COMMENT",
	"'('",
	"'~'",
	"UNION",
	"MINUS",
	"EXCEPT",
	"INTERSECT",
	"','",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OR",
	"AND",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"IN",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'.'",
	"UNARY",
	"END",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"NAMES",
	"SQL_MODE",
	"REPLACE",
	"ADMIN",
	"HELP",
	"OFFSET",
	"COLLATE",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"TRUNCATE",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 656

var yyAct = [...]int{

	112, 109, 187, 387, 354, 103, 141, 317, 189, 272,
	348, 74, 231, 150, 190, 3, 77, 213, 267, 201,
	89, 110, 98, 60, 120, 99, 82, 53, 37, 38,
	39, 40, 281, 93, 396, 63, 289, 290, 291, 292,
	293, 144, 294, 295, 365, 164, 163, 79, 78, 396,
	84, 66, 396, 86, 364, 158, 158, 90, 363, 219,
	158, 260, 229, 52, 83, 53, 97, 264, 72, 115,
	119, 104, 85, 125, 217, 54, 345, 220, 133, 135,
	102, 116, 117, 118, 140, 107, 123, 58, 47, 80,
	49, 300, 148, 143, 50, 79, 154, 130, 261, 258,
	398, 340, 160, 62, 276, 106, 162, 126, 152, 137,
	191, 95, 186, 188, 192, 397, 149, 173, 395, 401,
	156, 344, 309, 121, 122, 100, 307, 259, 228, 198,
	79, 78, 79, 78, 336, 338, 136, 205, 208, 206,
	195, 200, 216, 218, 215, 210, 75, 76, 203, 55,
	56, 57, 199, 124, 268, 223, 312, 262, 268, 164,
	163, 104, 237, 208, 61, 347, 88, 139, 241, 239,
	240, 246, 247, 227, 250, 251, 252, 253, 254, 255,
	256, 257, 235, 224, 236, 163, 337, 209, 242, 171,
	174, 175, 176, 177, 178, 173, 104, 104, 172, 171,
	174, 175, 176, 177, 178, 173, 360, 275, 274, 176,
	177, 178, 173, 349, 278, 245, 263, 265, 164, 163,
	271, 279, 248, 131, 91, 277, 79, 78, 244, 243,
	79, 285, 238, 269, 349, 147, 51, 283, 282, 152,
	174, 175, 176, 177, 178, 173, 299, 302, 303, 362,
	286, 19, 20, 21, 22, 330, 328, 249, 235, 369,
	331, 329, 361, 306, 334, 301, 333, 104, 332, 131,
	202, 79, 78, 260, 313, 23, 202, 320, 157, 371,
	71, 316, 315, 314, 152, 311, 284, 308, 381, 172,
	171, 174, 175, 176, 177, 178, 173, 34, 234, 380,
	326, 327, 287, 233, 373, 374, 323, 343, 131, 19,
	370, 158, 235, 235, 127, 346, 37, 38, 39, 40,
	270, 352, 355, 379, 351, 134, 350, 94, 356, 28,
	29, 225, 30, 31, 196, 234, 32, 33, 94, 194,
	233, 24, 25, 27, 26, 366, 193, 94, 64, 80,
	367, 298, 341, 35, 172, 171, 174, 175, 176, 177,
	178, 173, 205, 297, 376, 161, 378, 375, 377, 339,
	322, 321, 383, 384, 355, 393, 385, 64, 222, 221,
	388, 388, 388, 386, 389, 390, 209, 62, 155, 394,
	129, 145, 79, 78, 115, 119, 142, 402, 125, 138,
	41, 87, 403, 399, 404, 102, 116, 117, 118, 382,
	107, 123, 19, 172, 171, 174, 175, 176, 177, 178,
	173, 43, 44, 45, 46, 368, 19, 115, 119, 128,
	106, 125, 126, 59, 92, 204, 65, 305, 80, 116,
	117, 118, 211, 107, 123, 151, 146, 69, 121, 122,
	100, 67, 318, 359, 319, 115, 119, 273, 358, 125,
	325, 202, 73, 106, 400, 126, 80, 116, 117, 118,
	19, 107, 123, 289, 290, 291, 292, 293, 124, 294,
	295, 121, 122, 391, 119, 42, 18, 125, 17, 16,
	15, 106, 14, 126, 80, 116, 117, 118, 13, 134,
	123, 19, 12, 96, 212, 48, 280, 214, 81, 121,
	122, 124, 153, 392, 372, 353, 207, 119, 357, 324,
	125, 126, 310, 197, 266, 114, 111, 80, 116, 117,
	118, 113, 134, 123, 226, 108, 165, 121, 122, 124,
	119, 342, 105, 125, 335, 232, 288, 132, 230, 101,
	80, 116, 117, 118, 126, 134, 123, 296, 172, 171,
	174, 175, 176, 177, 178, 173, 159, 124, 68, 36,
	121, 122, 119, 70, 11, 125, 10, 126, 9, 8,
	7, 6, 80, 116, 117, 118, 5, 134, 123, 4,
	2, 1, 0, 121, 122, 304, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 172, 171, 174, 175, 176, 177, 178, 173,
	0, 167, 169, 124, 0, 121, 122, 179, 180, 181,
	182, 183, 184, 185, 170, 168, 166, 172, 171, 174,
	175, 176, 177, 178, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124,
}
var yyPact = [...]int{

	246, -1000, -1000, 278, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -11, -38, -24, 50, -1000, 2,
	-1000, -1000, -1000, 72, 317, -1000, 465, 434, -1000, -1000,
	-1000, 429, -1000, -76, 356, 453, 58, -78, -36, 317,
	-1000, -27, 317, -1000, 370, -84, 317, -84, -1000, 409,
	311, -1000, 31, -1000, -1000, -33, -1000, -1000, 374, -1000,
	279, 404, 361, 356, 227, 519, 551, -1000, 74, -1000,
	29, 368, 111, 317, -1000, 365, -1000, -61, 360, 426,
	182, 317, 356, 421, 318, 357, 356, -1000, 269, -1000,
	-1000, 346, 26, 164, 565, -1000, 435, 407, -1000, -1000,
	-1000, 551, 310, 303, -1000, 298, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 551, -1000, 356, 318,
	451, 318, -1000, 341, 496, 126, 463, 355, -1000, 422,
	-89, -1000, 46, -1000, 348, -1000, -1000, 347, -1000, 302,
	-1000, 289, 278, 20, -1000, -1000, -1000, 267, 374, -1000,
	-1000, 317, 156, 435, 435, 551, 289, 158, 551, 551,
	201, 551, 551, 551, 551, 551, 551, 551, 551, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 565, -9, 19,
	-10, 565, -1000, 49, 374, -1000, 465, 99, 126, 291,
	266, 444, 435, -1000, 551, 126, 126, -1000, -1000, 24,
	-1000, -1000, 172, 317, -1000, -70, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 421, 318, 244, -1000, -1000, 318,
	260, 430, 332, 304, 11, -1000, -1000, -1000, -1000, -1000,
	130, 126, -1000, 289, 551, 551, 126, 540, -1000, 416,
	166, 116, -1000, 133, 133, 38, 38, 38, -1000, -1000,
	551, -1000, -1000, 18, 374, 14, 95, -1000, 435, 421,
	318, 444, 437, 440, 164, 126, 317, 340, -1000, -1000,
	339, -1000, -1000, 227, 289, -1000, 449, 267, 267, -1000,
	-1000, 213, 212, 225, 223, 221, 83, -1000, 338, -7,
	321, -1000, 126, 486, 551, -1000, 126, -1000, 13, -1000,
	-6, -1000, 551, 105, 160, 181, 437, -1000, 551, 551,
	-1000, -1000, -1000, -1000, 446, 439, 430, 153, -1000, 219,
	-1000, 206, -1000, -1000, -1000, -1000, -42, -46, -56, -1000,
	-1000, -1000, 551, 126, -1000, -1000, 126, 551, -1000, 399,
	-1000, -1000, 217, 237, -1000, 282, -1000, 444, 435, 551,
	435, -1000, -1000, 287, 263, 252, 126, 126, 382, 551,
	551, 551, -1000, -1000, -1000, 437, 164, 231, 164, 317,
	317, 317, 476, 126, 126, -1000, 359, 10, -1000, 7,
	-8, 318, -1000, 457, 48, -1000, 317, -1000, -1000, 227,
	-1000, 317, -1000, 317, -1000,
}
var yyPgo = [...]int{

	0, 591, 590, 14, 589, 586, 581, 580, 579, 578,
	576, 574, 400, 573, 569, 568, 236, 22, 25, 566,
	557, 549, 548, 12, 546, 545, 23, 544, 3, 19,
	5, 542, 536, 13, 535, 2, 21, 8, 534, 531,
	24, 526, 1, 525, 524, 18, 523, 522, 519, 518,
	9, 515, 4, 514, 7, 513, 33, 512, 10, 11,
	16, 166, 508, 507, 506, 505, 504, 0, 6, 503,
	502, 498, 492, 490, 489, 488, 486, 485,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 4, 4, 73, 73, 5, 6, 7, 7, 7,
	7, 7, 70, 70, 71, 72, 74, 74, 75, 76,
	8, 8, 8, 9, 9, 9, 10, 11, 11, 11,
	77, 12, 13, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 17, 18, 18, 18, 21, 21, 19, 19,
	19, 22, 22, 23, 23, 23, 23, 20, 20, 20,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	25, 25, 26, 26, 27, 27, 27, 27, 28, 28,
	29, 29, 30, 30, 30, 30, 30, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 32, 32, 32,
	32, 32, 32, 32, 33, 33, 38, 38, 36, 36,
	40, 37, 37, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	39, 39, 41, 41, 41, 43, 46, 46, 44, 44,
	45, 47, 47, 42, 42, 42, 34, 34, 34, 34,
	48, 48, 49, 49, 50, 50, 51, 51, 52, 53,
	53, 53, 54, 54, 54, 54, 55, 55, 55, 56,
	56, 57, 57, 58, 58, 59, 59, 60, 60, 61,
	61, 62, 62, 16, 16, 63, 63, 63, 63, 63,
	64, 64, 65, 65, 66, 66, 67, 68, 69, 69,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 12,
	3, 8, 8, 6, 6, 8, 7, 3, 4, 4,
	6, 4, 1, 2, 1, 1, 4, 2, 2, 4,
	5, 8, 4, 6, 7, 4, 5, 4, 5, 5,
	0, 2, 0, 2, 1, 2, 1, 1, 1, 0,
	1, 1, 3, 1, 2, 3, 1, 1, 0, 1,
	2, 1, 3, 3, 3, 3, 5, 0, 1, 2,
	1, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	3, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 3, 3, 4,
	3, 4, 5, 6, 3, 4, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 4, 5, 4, 1,
	1, 1, 1, 1, 1, 5, 0, 1, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 0,
	3, 1, 3, 0, 5, 1, 3, 3, 3, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 2, 1, 0, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -70, -71, -72, -73, -74, -75, -76, 5,
	6, 7, 8, 29, 95, 96, 98, 97, 83, 84,
	86, 87, 90, 91, 51, 107, -14, 38, 39, 40,
	41, -12, -77, -12, -12, -12, -12, 99, -65, 101,
	105, -16, 101, 103, 99, 99, 100, 101, 85, -12,
	-26, 92, 31, -67, 31, -12, -3, 17, -15, 18,
	-13, -16, -26, 9, -59, 88, 89, -60, -42, -67,
	31, -62, 104, 100, -67, 99, -67, 31, -61, 104,
	-67, -61, 25, -56, 36, 80, -69, 99, -17, -18,
	76, -21, 31, -30, -35, -31, 56, 36, -34, -42,
	-36, -41, -67, -39, -43, 20, 32, 33, 34, 21,
	-40, 74, 75, 37, 104, 24, 58, 35, 25, 29,
	-26, 42, 28, -35, 36, -35, 62, 80, 31, 56,
	-67, -68, 31, -68, 102, 31, 20, 53, -67, -26,
	-33, 24, -3, -57, -42, 31, -26, 9, 42, -19,
	-67, 19, 80, 55, 54, -32, 71, 56, 70, 57,
	69, 73, 72, 79, 74, 75, 76, 77, 78, 62,
	63, 64, 65, 66, 67, 68, -30, -35, -30, -37,
	-3, -35, -35, 36, 36, -40, 36, -46, -35, -26,
	-59, -29, 10, -60, 94, -35, -35, 53, -67, 31,
	-68, 20, -66, 106, -63, 98, 96, 28, 97, 13,
	31, 31, 31, -68, -56, 29, -38, -36, 108, 42,
	-22, -23, -25, 36, 31, -40, -18, -67, 76, -30,
	-30, -35, -36, 71, 70, 57, -35, -35, 21, 56,
	-35, -35, -35, -35, -35, -35, -35, -35, 108, 108,
	42, 108, 108, -17, 18, -17, -44, -45, 59, -56,
	29, -29, -50, 13, -30, -35, 80, 53, -67, -68,
	-64, 102, -33, -59, 42, -42, -29, 42, -24, 43,
	44, 45, 46, 47, 49, 50, -20, 31, 19, -23,
	80, -36, -35, -35, 55, 21, -35, 108, -17, 108,
	-47, -45, 61, -30, -33, -59, -50, -54, 15, 14,
	-67, 31, 31, -36, -48, 11, -23, -23, 43, 48,
	43, 48, 43, 43, 43, -27, 51, 103, 52, 31,
	108, 31, 55, -35, 108, 82, -35, 60, -58, 53,
	-58, -54, -35, -51, -52, -35, -68, -49, 12, 14,
	53, 43, 43, 100, 100, 100, -35, -35, 26, 42,
	93, 42, -53, 22, 23, -50, -30, -37, -30, 36,
	36, 36, 27, -35, -35, -52, -54, -28, -67, -28,
	-28, 7, -55, 16, 30, 108, 42, 108, 108, -59,
	7, 71, -67, -67, -67,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 50,
	50, 50, 50, 50, 212, 203, 0, 0, 32, 0,
	34, 35, 50, 0, 0, 50, 0, 54, 56, 57,
	58, 59, 52, 203, 0, 0, 0, 201, 0, 0,
	213, 0, 0, 204, 0, 199, 0, 199, 33, 0,
	189, 37, 92, 38, 216, 218, 20, 55, 0, 60,
	51, 0, 0, 0, 27, 0, 0, 195, 0, 163,
	216, 0, 0, 0, 217, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 18, 61,
	63, 68, 216, 66, 67, 102, 0, 0, 133, 134,
	135, 0, 163, 0, 149, 0, 166, 167, 168, 169,
	129, 152, 153, 154, 150, 151, 156, 53, 0, 0,
	100, 0, 28, 29, 0, 31, 0, 0, 217, 0,
	214, 42, 0, 45, 0, 47, 200, 0, 217, 189,
	36, 0, 125, 0, 191, 93, 39, 0, 0, 64,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	118, 119, 120, 121, 122, 123, 105, 0, 0, 0,
	0, 131, 144, 0, 0, 116, 0, 0, 157, 189,
	100, 174, 0, 196, 0, 131, 197, 198, 164, 216,
	40, 202, 0, 0, 217, 210, 205, 206, 207, 208,
	209, 46, 48, 49, 0, 0, 124, 126, 190, 0,
	100, 71, 77, 0, 89, 91, 62, 70, 65, 103,
	104, 107, 108, 0, 0, 0, 110, 0, 114, 0,
	136, 137, 138, 139, 140, 141, 142, 143, 106, 128,
	0, 130, 145, 0, 0, 0, 161, 158, 0, 0,
	0, 174, 182, 0, 101, 30, 0, 0, 215, 43,
	0, 211, 23, 24, 0, 192, 170, 0, 0, 80,
	81, 0, 0, 0, 0, 0, 94, 78, 0, 0,
	0, 109, 111, 0, 0, 115, 132, 146, 0, 148,
	0, 159, 0, 0, 193, 193, 182, 26, 0, 0,
	165, 217, 44, 127, 172, 0, 72, 75, 82, 0,
	84, 0, 86, 87, 88, 73, 0, 0, 0, 79,
	74, 90, 0, 112, 147, 155, 162, 0, 21, 0,
	22, 25, 183, 175, 176, 179, 41, 174, 0, 0,
	0, 83, 85, 0, 0, 0, 113, 160, 0, 0,
	0, 0, 178, 180, 181, 182, 173, 171, 76, 0,
	0, 0, 0, 184, 185, 177, 186, 0, 98, 0,
	0, 0, 19, 0, 0, 95, 0, 96, 97, 194,
	187, 0, 99, 0, 188,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 78, 73, 3,
	36, 108, 76, 74, 42, 75, 80, 77, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	63, 62, 64, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 79, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 72, 3, 37,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 38, 39, 40, 41, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 65, 66, 67,
	68, 69, 70, 71, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}
type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}
func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}
func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4
	if !yyErrorVerbose {
		return "syntax error"
	}
	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)
	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)
	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}
	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}
		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}
	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}
func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}
out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}
func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}
yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}
		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}
	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}
	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1
	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:196
		{
			SetParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:202
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:223
		{
			yyVAL.selStmt = &SimpleSelect{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 19:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:227
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[6].tableExprs, Where: NewWhere(AST_WHERE, yyDollar[7].boolExpr), GroupBy: GroupBy(yyDollar[8].valExprs), Having: NewWhere(AST_HAVING, yyDollar[9].boolExpr), OrderBy: yyDollar[10].orderBy, Limit: yyDollar[11].limit, Lock: yyDollar[12].str}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:231
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:238
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: yyDollar[6].columns, Rows: yyDollar[7].insRows, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:242
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, col := range yyDollar[7].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:254
		{
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:258
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, col := range yyDollar[6].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:271
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(AST_WHERE, yyDollar[6].boolExpr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:277
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(AST_WHERE, yyDollar[5].boolExpr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:283
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:287
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: UpdateExprs{&UpdateExpr{Name: &ColName{Name: []byte("names")}, Expr: StrVal("default")}}}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:291
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: UpdateExprs{&UpdateExpr{Name: &ColName{Name: []byte("names")}, Expr: yyDollar[4].valExpr}}}
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:295
		{
			yyVAL.statement = &Set{
				Comments: Comments(yyDollar[2].bytes2),
				Exprs: UpdateExprs{
					&UpdateExpr{
						Name: &ColName{Name: []byte("names")}, Expr: yyDollar[4].valExpr,
					},
					&UpdateExpr{
						Name: &ColName{Name: []byte("collate")}, Expr: yyDollar[6].valExpr,
					},
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:309
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: UpdateExprs{&UpdateExpr{Name: &ColName{Name: []byte("session")}, Expr: yyDollar[4].valExpr}}}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:315
		{
			yyVAL.statement = &Begin{}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:319
		{
			yyVAL.statement = &Begin{}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:326
		{
			yyVAL.statement = &Commit{}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
			yyVAL.statement = &Rollback{}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:338
		{
			yyVAL.statement = &Admin{Region: yyDollar[2].tableName, Columns: yyDollar[3].columns, Rows: yyDollar[4].insRows}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:342
		{
			yyVAL.statement = &AdminHelp{}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = &UseDB{DB: string(yyDollar[2].bytes)}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = &Truncate{Comments: Comments(yyDollar[2].bytes2), TableOpt: yyDollar[3].str, Table: yyDollar[4].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:360
		{
			yyVAL.statement = &DDL{Action: AST_CREATE, NewName: yyDollar[4].bytes}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:364
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[7].bytes, NewName: yyDollar[7].bytes}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &DDL{Action: AST_CREATE, NewName: yyDollar[3].bytes}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = &DDL{Action: AST_ALTER, Ignore: yyDollar[2].str, Table: yyDollar[4].bytes, NewName: yyDollar[4].bytes}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:379
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AST_RENAME, Ignore: yyDollar[2].str, Table: yyDollar[4].bytes, NewName: yyDollar[7].bytes}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[3].bytes, NewName: yyDollar[3].bytes}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:390
		{
			yyVAL.statement = &DDL{Action: AST_RENAME, Table: yyDollar[3].bytes, NewName: yyDollar[5].bytes}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:396
		{
			yyVAL.statement = &DDL{Action: AST_DROP, Table: yyDollar[4].bytes}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:400
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[5].bytes, NewName: yyDollar[5].bytes}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:405
		{
			yyVAL.statement = &DDL{Action: AST_DROP, Table: yyDollar[4].bytes}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:410
		{
			SetAllowComments(yylex, true)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:414
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			SetAllowComments(yylex, false)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:420
		{
			yyVAL.bytes2 = nil
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:424
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.str = AST_UNION
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = AST_UNION_ALL
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.str = AST_SET_MINUS
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = AST_EXCEPT
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = AST_INTERSECT
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:451
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = AST_DISTINCT
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:475
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].bytes}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyDollar[1].bytes}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.expr = yyDollar[1].boolExpr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.expr = yyDollar[1].valExpr
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:494
		{
			yyVAL.bytes = nil
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:502
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:512
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].smTableExpr, As: yyDollar[2].bytes, Hints: yyDollar[3].indexHints}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyDollar[2].tableExpr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:530
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].boolExpr}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:535
		{
			yyVAL.bytes = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.str = AST_JOIN
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = AST_STRAIGHT_JOIN
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = AST_JOIN
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = AST_CROSS_JOIN
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = AST_NATURAL_JOIN
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.smTableExpr = &TableName{Name: yyDollar[1].bytes}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:591
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:595
		{
			yyVAL.smTableExpr = yyDollar[1].subquery
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].bytes}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:605
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:610
		{
			yyVAL.indexHints = nil
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.indexHints = &IndexHints{Type: AST_USE, Indexes: yyDollar[4].bytes2}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:618
		{
			yyVAL.indexHints = &IndexHints{Type: AST_IGNORE, Indexes: yyDollar[4].bytes2}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:622
		{
			yyVAL.indexHints = &IndexHints{Type: AST_FORCE, Indexes: yyDollar[4].bytes2}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.bytes2 = [][]byte{yyDollar[1].bytes}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[3].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:637
		{
			yyVAL.boolExpr = nil
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:648
		{
			yyVAL.boolExpr = &AndExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:652
		{
			yyVAL.boolExpr = &OrExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.boolExpr = &NotExpr{Expr: yyDollar[2].boolExpr}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyDollar[2].boolExpr}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: yyDollar[2].str, Right: yyDollar[3].valExpr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_IN, Right: yyDollar[3].tuple}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:674
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_IN, Right: yyDollar[4].tuple}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:678
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_LIKE, Right: yyDollar[3].valExpr}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:682
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_LIKE, Right: yyDollar[4].valExpr}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:686
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_BETWEEN, From: yyDollar[3].valExpr, To: yyDollar[5].valExpr}
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:690
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_NOT_BETWEEN, From: yyDollar[4].valExpr, To: yyDollar[6].valExpr}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NULL, Expr: yyDollar[1].valExpr}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:698
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NOT_NULL, Expr: yyDollar[1].valExpr}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.str = AST_EQ
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.str = AST_LT
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.str = AST_GT
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.str = AST_LE
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.str = AST_GE
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.str = AST_NE
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.str = AST_NSE
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.values = Values{yyDollar[1].tuple}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:752
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].tuple)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:758
		{
			yyVAL.tuple = ValTuple(yyDollar[2].valExprs)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.tuple = yyDollar[1].subquery
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:768
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.valExpr = yyDollar[1].colName
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.valExpr = yyDollar[1].tuple
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITAND, Right: yyDollar[3].valExpr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:800
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITOR, Right: yyDollar[3].valExpr}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:804
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITXOR, Right: yyDollar[3].valExpr}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_PLUS, Right: yyDollar[3].valExpr}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MINUS, Right: yyDollar[3].valExpr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:816
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MULT, Right: yyDollar[3].valExpr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:820
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_DIV, Right: yyDollar[3].valExpr}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MOD, Right: yyDollar[3].valExpr}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			if num, ok := yyDollar[2].valExpr.(NumVal); ok {
				switch yyDollar[1].byt {
				case '-':
					yyVAL.valExpr = append(NumVal("-"), num...)
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:847
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].selectExprs}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:851
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:855
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].selectExprs}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.valExpr = yyDollar[1].caseExpr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.bytes = IF_BYTES
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.bytes = VALUES_BYTES
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.byt = AST_UPLUS
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.byt = AST_UMINUS
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.byt = AST_TILDA
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:889
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyDollar[2].valExpr, Whens: yyDollar[3].whens, Else: yyDollar[4].valExpr}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:894
		{
			yyVAL.valExpr = nil
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:908
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:914
		{
			yyVAL.when = &When{Cond: yyDollar[2].boolExpr, Val: yyDollar[4].valExpr}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.valExpr = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].bytes}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:933
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:937
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[3].bytes, Name: yyDollar[5].bytes}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.valExpr = StrVal(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.valExpr = NumVal(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.valExpr = ValArg(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.valExprs = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.valExprs = yyDollar[3].valExprs
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.boolExpr = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.orderBy = nil
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.order = &Order{Expr: yyDollar[1].valExpr, Direction: yyDollar[2].str}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1003
		{
			yyVAL.str = AST_ASC
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.str = AST_ASC
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.str = AST_DESC
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.limit = nil
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1020
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].valExpr}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1024
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].valExpr, Rowcount: yyDollar[4].valExpr}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1028
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].valExpr, Rowcount: yyDollar[2].valExpr}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = AST_FOR_UPDATE
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1041
		{
			if !bytes.Equal(yyDollar[3].bytes, SHARE) {
				yylex.Error("expecting share")
				return 1
			}
			if !bytes.Equal(yyDollar[4].bytes, MODE) {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = AST_SHARE_MODE
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columns = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyDollar[1].colName}}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyDollar[3].colName})
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1073
		{
			yyVAL.updateExprs = nil
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1077
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].valExpr}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: StrVal("ON")}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.empty = struct{}{}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.empty = struct{}{}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.empty = struct{}{}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			yyVAL.empty = struct{}{}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = AST_IGNORE
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.empty = struct{}{}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.empty = struct{}{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.empty = struct{}{}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.empty = struct{}{}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.empty = struct{}{}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.empty = struct{}{}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.empty = struct{}{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.empty = struct{}{}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.empty = struct{}{}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.empty = struct{}{}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.bytes = bytes.ToLower(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			ForceEOF(yylex)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = AST_TABLE
		}
	}
	goto yystack /* stack new state and value */
}
